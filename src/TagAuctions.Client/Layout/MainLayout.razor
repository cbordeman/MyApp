@using MudBlazor.Utilities

@inherits LayoutComponentBase

@inject ICookieService CookieService

<MudThemeProvider Theme="@Theme" @ref="mgr" IsDarkMode="@IsDarkMode" ObserveSystemThemeChange="false" 
                  IsDarkModeChanged="IsDarkModeChanged" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="2" Dense="false">
        <MudStaticNavDrawerToggle DrawerId="nav-drawer" Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" />
        <MudStack Class="ml-2 mt-1" Spacing="0" Justify="Justify.SpaceAround">
            <MudText Typo="Typo.h6" Style="line-height: 1.0">Heading</MudText>
            <b><MudText Typo="Typo.body1" Class="ml-5 mt-1" Style="line-height: 1.0">Subheading</MudText></b>
        </MudStack>
        <MudSpacer />
        @if (RendererInfo.Name != "Static")
        {
            @* Temporary for debugging rendering delays *@
            @* These values only appear to set after the startup delay *@
             <MudStack Spacing="0">
                <MudText Typo="Typo.body1" Style="line-height: 1.0">@RendererInfo.Name</MudText>
                <MudText Typo="Typo.body1" Style="line-height: 1.0">@(RendererInfo.IsInteractive ? "Intera" : "NotInter")</MudText>
            </MudStack>

            <MudIconButton @onclick="ToggleDark" Color="Color.Inherit" Icon="@ModeIcon"/>
        }
        <MudIconButton Icon="@Icons.Material.Filled.Person" Color="Color.Inherit" Edge="Edge.End"/>
    </MudAppBar>

    <MudDrawer id="nav-drawer" @bind-Open="drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent Class="mt-16 pa-4">
        @Body
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    bool drawerOpen = true;
    MudThemeProvider mgr;

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
        
    // }

    static readonly MudTheme Theme = new()
    {
        PaletteDark =
        {
            Primary = MudColor.Parse("#336533"),
            Background = MudColor.Parse("#101010"),
            Surface = MudColor.Parse("#13211399"),
            DrawerBackground = MudColor.Parse("#22222222"),
            AppbarBackground = MudColor.Parse("#132113")
        },
        PaletteLight =
        {
            Primary = MudColor.Parse("#004800"),
            AppbarBackground = MudColor.Parse("#004800")
        }

        //theme.PaletteDark.BackgroundGray = MudColor.Parse("#000");
        // PaletteLight = null,
        // PaletteDark = null,
        // Shadows = null,
        // Typography = null,
        // LayoutProperties = null,
        // ZIndex = null,
        // PseudoCss = null
    };

    string ModeIcon => IsDarkMode ? Icons.Material.Outlined.DarkMode : Icons.Material.Outlined.LightMode;

    [CascadingParameter(Name = "IsDarkMode")]
    public bool IsDarkMode { get; set; }

    async Task ToggleDark()
    {
        IsDarkMode = !IsDarkMode;
        Console.WriteLine($"IsDarkMode set to: {IsDarkMode}");
        await CookieService.SetAsync(nameof(IsDarkMode), IsDarkMode.ToString(), DateTimeOffset.MaxValue);
    }

    private void IsDarkModeChanged()
    {
        Console.WriteLine($"EVENT: IsDarkMode new value: {IsDarkMode}");
    }

}